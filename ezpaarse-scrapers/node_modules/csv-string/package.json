{
  "name": "csv-string",
  "version": "2.1.1",
  "author": {
    "name": "Nicolas Thouvenin",
    "email": "nthouvenin@gmail.com"
  },
  "contributors": [
    {
      "name": "Stéphane Gully",
      "url": "https://github.com/kerphi"
    },
    {
      "name": "J Baumbach",
      "url": "https://github.com/jbaumbach"
    },
    {
      "name": "Sam Hauglustaine",
      "url": "https://github.com/smhg"
    },
    {
      "name": "Rick Huizinga",
      "url": "https://github.com/rickhuizinga"
    }
  ],
  "description": "PARSE and STRINGIFY for CSV strings. It's like JSON object but for CSV. It can also work row by row. And, if can parse strings, it can be use to parse files or streams too.",
  "keywords": [
    "csv",
    "parser",
    "string",
    "generator"
  ],
  "homepage": "http://github.com/touv/node-csv-string",
  "scripts": {
    "test": "mocha"
  },
  "main": "./index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/touv/node-csv-string.git"
  },
  "dependencies": {},
  "devDependencies": {
    "mocha": ">=1.8.1",
    "should": ">=1.2.1"
  },
  "license": "MIT",
  "engines": {
    "node": ">=0.10.0"
  },
  "readme": "# Javascript CSV Strings\n\n[![Build Status](https://travis-ci.org/touv/node-csv-string.png?branch=master)](https://travis-ci.org/touv/node-csv-string)\n\nParse and Stringify for CSV strings. It's like JSON object but for CSV. It can also work row by row. \nAnd, if can parse strings, it can be use to parse files or streams too.\n \n## Contributors\n\n  * [Nicolas Thouvenin](https://github.com/touv) \n  * [Stéphane Gully](https://github/kerphi)\n  * [J. Baumbach](https://github.com/jbaumbach)\n  * [Sam Hauglustaine](https://github.com/smhg)\n  * [Rick Huizinga](https://github.com/rickhuizinga)\n\n# Installation\n\nWith [npm](http://npmjs.org) do:\n\n    $ npm install csv-string\n\n\n# Tests\n\nUse [mocha](https://github.com/visionmedia/mocha) to run the tests.\n\n    $ npm install mocha\n    $ mocha test\n\n# API Documentation\n\n## parse(input : String, [separator : String]) : Object\n\nParse `input` to convert to an array.\n```javascript\n\tvar CSV = require('csv-string'),\n\t arr = CSV.parse('a,b,c\\na,b,c');\n\n\tconsole.log(arr);\n```\nOutput:\n\t\n\t[ [ 'a', 'b', 'c' ], [ 'a', 'b', 'c' ] ]\n\t\nIf separator parameter is not provided, it is automatically detected.\n\n## stringify(input : Object, [separator : String]) : String\n\nConverts `input` to a CSV string. \n\n```javascript\n\tvar CSV = require('csv-string');\n\t\n\tconsole.log(CSV.stringify(['a', 'b', 'c']));\n\tconsole.log(CSV.stringify([['c', 'd', 'e'], ['c','d','e']]));\n\tconsole.log(CSV.stringify({a:'e', b:'f', c:'g'}));\n```\nOutput:\n\t\n\ta,b,c\n\t\n\tc,d,e\n\tc,d,e\n\t\n\te,f,g\n\n## detect(input : String) : String\n\nDetects the best separator.\n\n```javascript\n\tvar CSV = require('csv-string');\n\t\n\tconsole.log(CSV.detect('a,b,c'));\n\tconsole.log(CSV.detect('a;b;c'));\n\tconsole.log(CSV.detect('a|b|c'));\n\tconsole.log(CSV.detect('a\\tb\\tc'));\n```\nOutput:\n\t\n\t,\n\t;\n\t|\n\t\\t\n\t\n\n## forEach(input : String, sep : String, callback : Function) \n## forEach(input : String, callback : Function) \n_callback(row : Array, index : Number) : undefined_\n\nCalls `callback` for each CSV row/line. The Array passed to callback contains the fields of the current row.  \n\n\n```javascript\n\tvar CSV = require('csv-string');\n    var data = 'a,b,c\\nd,e,f';\n\tCSV.forEach(data, ',', function(row, index) {\n\t\tconsole.log('#' + index + ' : ', row);\n\t});\n```\nOutput:\n\t\n\t#0 :  [ 'a', 'b', 'c' ]\n\t#1 :  [ 'd', 'e', 'f' ]\n\t\n\n## read(input : String, sep : String, callback : Function) : Number\n## read(input : String, callback : Function) : Number\n_callback(row : Array) : undefined_ \n\nCalls `callback` when a CSV row is readed. The Array passed to callback contains the fields of the row.  \nReturns the first offset after the row.\n\n\n```javascript\n\tvar CSV = require('csv-string');\n    var data = 'a,b,c\\nd,e,f';\n\tvar index = CSV.read(data, ',', function(row) {\n\t\tconsole.log(row);\n\t});\n    console.log(data.slice(index));\n```\nOutput:\n\t\n\t[ 'a', 'b', 'c' ]\n\td,e,f\n\t\n\n## readAll(input : String, sep : String, callback : Function) : Number\n## readAll(input : String, callback : Function) : Number\n_callback(rows : Array) : undefined_\n\nCalls `callback` when a all CSV rows is readed. The Array passed to callback contains the rows of the file.  \nReturns the offset of the end of parsing (generaly it's the end of the input string).\n\n\n```javascript\n\tvar CSV = require('csv-string');\n    var data = 'a,b,c\\nd,e,f';\n\tindex = CSV.readAll(data, function(row) {\n\t\tconsole.log(row);\n\t});\n    console.log('-' + data.slice(index) + '-');\n```\nOutput:\n\t\n\t[ [ 'a', 'b', 'c' ], [ 'd', 'e', 'f' ] ]\n\t--\n## readChunk(input : String, sep : String, callback : Function) : Number\n## readChunk(input : String, callback : Function) : Number\n_callback(rows : Array) : undefined_\n\nCalls `callback` when a all CSV rows is readed. The last row could be ignored, because the remainder could be in another chunk. \nThe Array passed to callback contains the rows of the file. \nReturns the offset of the end of parsing. When the last row is ignored, the offset point at the begin of row.\n\n\n```javascript\n\tvar CSV = require('csv-string');\n    var data = 'a,b,c\\nd,e';\n\tindex = CSV.readChunk(data, function(row) {\n\t\tconsole.log(row);\n\t});\n    console.log('-' + data.slice(index) + '-');\n```\nOutput:\n\t\n\t[ [ 'a', 'b', 'c' ] ]\n\t--\n\t\n\t\n## createStream(options : Array) : WritableStream\n## createStream() : WritableStream\n\nCreate a writable stream for CSV chunk. Options are :\n\n* **separator** : To indicate the CSV separator. By default is comma (',')\n\nExample : Read CSV file from the standard input.\n\n```javascript\n\tvar stream = CSV.createStream();\n\t\n\tstream.on('data', function (row) {\n\t     console.log(row);\n\t  }\n\t)\n\t\n\tprocess.stdin.resume();\n\tprocess.stdin.setEncoding('utf8');\n\tprocess.stdin.pipe(stream);\n```\n\n\n\n\n# Also\n\n* https://npmjs.org/browse/keyword/csv\n* http://www.uselesscode.org/javascript/csv/\n* https://github.com/archan937/csonv.js\n\n# Benchmark\n\n \nA for file and stream, there are many others packages that already exists. \nTo compare them, I made a very basic benchmark (see ./bench for source code)\n\n## the test\n\n```bash\n\n\ttime node ./SCRITPNAME.js >/dev/null\n\n```\n## the result\n\n<table>\n<thead> \n<tr>\n<th>Package</th>\n<th>Input equal Output</th>\n<th>Time for ~1 200 000 rows</th>\n</tr>\n<tbody>\n<tr>\n<td>a-csv</td>        <td>almost</td>\t<td>0m13.903s</td>\n</tr> <tr>\n<td>csv-streamer</td> <td>yes</td>\t<td>0m15.599s</td>\n</tr> <tr>\n<td>csv-stream</td>   <td>yes</td>\t<td>0m17.265s</td>\n</tr> <tr>\n<th>csv-string</th>   <th>yes</th>\t<th>0m15.432s</th>\n</tr> <tr>\n<td>fast-csv</td>     <td>no</td>\t<td>-</td>\n</tr> <tr>\n<td>nodecsv</td>      <td>yes</td>\t<td>0m22.129s</td>\n</tr>\n</tbody>\n</table>\n\n# License\n\n[MIT/X11](https://github.com/touv/node-csv-string/blob/master/LICENSE)\n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/touv/node-csv-string/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/touv/node-csv-string/issues"
  },
  "_id": "csv-string@2.1.1",
  "_from": "csv-string@~2.1.0"
}
