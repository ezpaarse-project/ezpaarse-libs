'use strict';

var path = require('path')
  , basename = path.basename(__filename, '.js')
  , debug = require('debug')('castor:load:' + basename)
  , util = require('util')
  , assert = require('assert')
  , crypto = require('crypto')
  , fs = require('fs')
  , url = require('url')
  , extend = require('extend')
  , request = require('needle')
  ;

function File(pathname, stats, startobj)
{
  if (!(this instanceof File)) {
    return new File(pathname, stats);
  }
  var self = this;

  assert.equal(typeof pathname, 'string');
  stats = stats || {}
  var type;
  if (typeof(stats.isFile) === "function") {
    if (stats.isFile()) {
      type = 'file';
    }
    else if (stats.isDirectory()) {
      type = 'directory';
    }
  }
  else {
    var oreq = url.parse(pathname, undefined, true);
    if (oreq.host) {
      type = 'url';
      var now = new Date();
      stats.ctime = stats.ctime || now;
      stats.mtime = stats.mtime || now;
      stats.atime = stats.atime || now;
    }
  }

  self.doc = {};
  if (startobj) {
    extend(self.doc, startobj)
  }
  self.doc.filetype = type || 'unknown';
  self.doc.basedir = startobj.basedir || '';
  self.doc.fid = crypto.createHash('sha1').update(pathname).digest('hex');
  self.doc.location = pathname;
  self.doc.basename = path.basename(pathname);
  self.doc.filename = pathname.replace(self.doc.basedir, '');
  self.doc.directory = path.dirname(pathname).replace(self.doc.basedir, '');
  self.doc.extension = path.extname(pathname).replace('.', '');
  self.doc.filesize  = stats.size || 0;

  self.doc.dateCreated = stats.ctime || null;
  self.doc.dateModified = stats.mtime || null;
  self.doc.dateAccessed = stats.atime || null;
  self.doc.sha1 = undefined;

  self.doc.openStream = function(opts) {
    opts = opts || {};
    if (this.filetype === 'url') {
      opts.parse = false;
      return require('needle').get(this.location, opts);
    }
    else {
      return fs.createReadStream(this.location, opts);
    }
  }
}

File.prototype.analyze = function (fn) {
  var self = this
    , shasum = crypto.createHash('sha1');

  if (self.doc.sha1 === undefined) {
    if (self.doc.filetype === 'file') {
      var s = fs.ReadStream(self.doc.location);
      s.on('data', function(d) {
        shasum.update(d);
      });

      s.on('end', function() {
        self.doc.sha1 = shasum.digest('hex');
        fn(null, self.doc)
      });

      s.on('error', function(e) {
        fn(e, self.doc);
        // fn(new Error('Analyse failed'));
      });
      return;
    }
    else if (self.doc.filetype === 'url') {
      request.head(self.doc.location, function(error, response) {
        if (error) {
          fn(error, self.doc);
        }
        else if (response.statusCode !== 200) {
          fn(new Error('HTTP 1.1/' + response.statusCode));
        }
        else {
          self.doc.sha1 = shasum.update(response.headers.etag).digest('hex');
          fn(null, self.doc)
        }
      });
      return;
    }
  }
  fn(null, self.doc);
}

File.prototype.get = function () {
  var self = this;

  return self.doc;

}


module.exports = File;
