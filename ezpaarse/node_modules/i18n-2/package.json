{
  "name": "i18n-2",
  "description": "lightweight simple translation module with dynamic json storage",
  "version": "0.4.6",
  "homepage": "http://github.com/jeresig/i18n-node-2",
  "repository": {
    "type": "git",
    "url": "http://github.com/jeresig/i18n-node-2.git"
  },
  "author": {
    "name": "John Resig",
    "email": "jeresig@gmail.com"
  },
  "main": "./index",
  "directories": {
    "lib": "."
  },
  "dependencies": {
    "sprintf": ">=0.1.1"
  },
  "devDependencies": {
    "expresso": ">=0.9.2"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "scripts": {
    "test": "expresso test/*"
  },
  "readme": "# Node.js: i18n-2\n\n * Designed to work out-of-the-box with Express.js\n * Lightweight simple translation module with dynamic json storage. \n * Uses common __('...') syntax in app and templates.\n * Stores language files in json files compatible to [webtranslateit](http://webtranslateit.com/) json format.\n * Adds new strings on-the-fly when first used in your app.\n * No extra parsing needed.\n\n## Installation\n\nRun the following:\n\n\tnpm install i18n-2\n\n## Simple Example\n\nNote: If you plan on using the module with Express.js, please view the on that, below.\n\n\t// Load Module and Instantiate\n\tvar i18n = new (require('i18n-2'))({\n\t\t// setup some locales - other locales default to the first locale\n\t\tlocales: ['en', 'de']\n\t});\n\n\t// Use it however you wish\n\tconsole.log( i18n.__(\"Hello!\") );\n\n## API:\n\n### `new I18n(options)`\n\nThe `I18n` function is the return result from calling `require('i18n-2')`. You use this to instantiate an `I18n` instance and set any configuration options. You'll probably only do this if you're not using the `expressBind` method.\n\n### `I18n.expressBind(app, options)`\n\nYou'll use this method to attach the i18n functionality to the request object inside Express.js. The app argument should be your Express.js app and the options argument should be the same as if you were calling `new I18n(options)`. See **\"Using with Express.js\"** at the end of this README for more details.\n\n### `__(string, [...])`\n\nTranslates a string according to the current locale. Also supports sprintf syntax, allowing you to replace text, using the node-sprintf module.\n\nFor example:\n\n\tvar greeting = i18n.__('Hello %s, how are you today?', 'Marcus');\n\nthis puts **Hello Marcus, how are you today?**. You might also add endless arguments or even nest it.\n\n\tvar greeting = i18n.__('Hello %s, how are you today? How was your %s?', \n\t\t'Marcus', i18n.__('weekend'));\n\nwhich puts **Hello Marcus, how are you today? How was your weekend?**\n\nYou might even use dynamic variables. They get added to the current locale file if they do not yet exist.\n\n\tvar greetings = ['Hi', 'Hello', 'Howdy'];\n\tfor (var i = 0; i < greetings.length; i++) {\n\t\tconsole.log( i18n.__(greetings[i]) );\n\t};\n\nwhich outputs:\n\n\tHi\n\tHello\n\tHowdy\n\n### `__n(one, other, count, [...])`\n\nDifferent plural forms are supported as a response to `count`:\n\n\tvar singular = i18n.__n('%s cat', '%s cats', 1);\n\tvar plural = i18n.__n('%s cat', '%s cats', 3);\n\nthis gives you **1 cat** and **3 cats**. As with `__(...)` these could be nested:\n\n\tvar singular = i18n.__n('There is one monkey in the %%s', 'There are %d monkeys in the %%s', 1, 'tree');\n\tvar plural = i18n.__n('There is one monkey in the %%s', 'There are %d monkeys in the %%s', 3, 'tree');\n\nputting **There is one monkey in the tree** or **There are 3 monkeys in the tree**.\n\n### `getLocale()`\n\nReturns a string containing the current locale. If no locale has been specified then it default to the value specified in `defaultLocale`.\n\n### `setLocale(locale)`\n\nSets a locale to the specified string. If the locale is unknown, the locale defaults to the one specified by `defaultLocale`. For example if you have locales of 'en' and 'de', and a `defaultLocale` of 'en', then call `.setLocale('ja')` it will be equivalent to calling `.setLocale('en')`.\n\n### `setLocaleFromQuery([request])`\n\nTo be used with Express.js or another framework that provides a `request` object. Generally you would want to use this by setting the `query` option to `true`.\n\nThis method takes in an Express.js request object, looks at the query property, and specifically at the `lang` parameter. Reading the value of that parameter will then set the locale.\n\nFor example:\n\n\texample.com/?lang=de\n\nWill then do:\n\n\tsetLocale('de')\n\n### `setLocaleFromSubdomain([request])`\n\nTo be used with Express.js or another framework that provides a `request` object. Generally you would want to use this by setting the `subdomain` option to `true`.\n\nThis method takes in an Express.js request object, looks at the hostname, and extracts the sub-domain. Reading the value of the subdomain the locale is then set.\n\nFor example:\n\n\tde.example.com\n\nWill then do:\n\n\tsetLocale('de')\n\n### `setLocaleFromCookie([request])`\n\nTo be used with Express.js or another framework that provides a `request` object. This method takes a request object, looks at it's cookies property and tries to find a cookie named `cookieName` (default: `lang`).\n\nSee [Using with Express.js](#using-with-expressjs) for a complete example.\n\nFor example:\n\n\tconsole.log(req.cookies.lang)\n\t=> 'de'\n\tsetLocaleFromCookie()\n\nWill then do:\n\n\tsetLocale('de')\n\n### `isPreferredLocale()`\n\nTo be used with Express.js or another framework that provides a `request` object. This method works if a `request` option has been specified when the i18n object was instantiated.\n\nThis method returns true if the locale specified by `getLocale` matches a language desired by the browser's `Accept-language` header.\n\n## Configuration\n\nWhen you instantiate a new i18n object there are a few options that you can pass in. The only required option is `locales`.\n\n### `locales`\n\nYou can pass in the locales in two ways: As an array of strings or as an object of objects. For example:\n\n\tlocales: ['en', 'de']\n\nThis will set two locales (en and de) and read in the JSON contents of both translation files. (By default this is equal to \"./locales/NAME.js\", you can configure this by changing the `directory` and `extension` options.) Additionally when you pass in an array of locales the first locale is automatically set as the `defaultLocale`.\n\nYou can also pass in an object, like so:\n\n\tlocales: {\n\t\t\"en\": {\n\t\t\t\"Hello\": \"Hello\"\n\t\t},\n\t\t\"de\": {\n\t\t\t\"Hello\": \"Hallo\"\n\t\t}\n\t}\n\nIn this particular case no files will ever be read when doing a translation. This is ideal if you are loading your translations from a different source. Note that no `defaultLocale` is set when you pass in an object, you'll need to set it yourself.\n\n### `defaultLocale`\n\nYou can explicitly define a default locale to be used in cases where `.setLocale(locale)` is used with an unknown locale. For example if you have locales of 'en' and 'de', and a `defaultLocale` of 'en', then call `.setLocale('ja')` it will be equivalent to calling `.setLocale('en')`.\n\n### `directory` and `extension`\n\nThese default to `\"./locales\"` and `\".js\"` accordingly. They are used for saving and reading the locale data files (see the `locales` option for more information on how this works).\n\nWhen your server is in production mode it will read these files only once and then cache the result. It will not write any updated strings when in production mode.\n\nWhen in development, or testing, mode the files will be read on every instantiation of the `i18n` object. Additionally newly-detected strings will be automatically added, and written out, to the locale JSON files.\n\nA generated `en.js` inside `./locales/` may look something like:\n\n\t{\n\t\t\"Hello\": \"Hello\",\n\t\t\"Hello %s, how are you today?\": \"Hello %s, how are you today?\",\n\t\t\"weekend\": \"weekend\",\n\t\t\"Hello %s, how are you today? How was your %s.\": \"Hello %s, how are you today? How was your %s.\",\n\t\t\"Hi\": \"Hi\",\n\t\t\"Howdy\": \"Howdy\",\n\t\t\"%s cat\": {\n\t\t\t\"one\": \"%s cat\",\n\t\t\t\"other\": \"%s cats\"\n\t\t},\n\t\t\"There is one monkey in the %%s\": {\n\t\t\t\"one\": \"There is one monkey in the %%s\",\n\t\t\t\"other\": \"There are %d monkeys in the %%s\"\n\t\t},\n\t\t\"tree\": \"tree\"\n\t}\n\nthat file can be edited or just uploaded to [webtranslateit](http://docs.webtranslateit.com/file_formats/) for any kind of collaborative translation workflow.\n\n### `request`, `subdomain`, and `query`\n\nThese options are to be used with Express.js or another framework that provides a `request` object. In order to use the `subdomain` and `query` options you must specify the `request` option, passing in the Express.js `request` object.\n\nIf you pass in a `request` object a new `i18n` property will be attached to it, containing the i18n instance.\n\nNote that you probably won't need to use `request` directly, if you use `expressBind` it is taken care of automatically.\n\nSetting the `subdomain` option to `true` will run the `setLocaleFromSubdomain` method automatically on every request.\n\nBy default the `query` option is set to true. Setting the `query` option to `false` will stop the `setLocaleFromQuery` method from running automatically on every request.\n\n### `register`\n\nCopy the `__`, `__n`, `getLocale`, and `isPreferredLocale` methods over to the object specified by the `register` property.\n\n\tvar obj = {};\n\tnew I18n({ 'register': obj })\n\tconsole.log( obj.__(\"Hello.\") );\n\n### `devMode`\n\nBy default the `devMode` property is automatically set to be `false` if Node.js is in production mode and `true` otherwise. You can override this by setting a different value to the `devMode` option.\n\n## Using with Express.js\n\n### Load and Configure\n\nIn your app.js:\n\n\t// load modules\n\tvar express = require('express'),\n\t\tI18n = require('i18n-2');\n\n\t// Express Configuration\n\tapp.configure(function() {\n\n\t\t// ...\n\n\t\t// Attach the i18n property to the express request object\n\t\t// And attach helper methods for use in templates\n\t\tI18n.expressBind(app, {\n\t\t\t// setup some locales - other locales default to en silently\n\t\t\tlocales: ['en', 'de'],\n\t\t\t// change the cookie name from 'lang' to 'locale'\n\t\t\tcookieName: 'locale'\n\t\t});\n\t\t\n\t\t// This is how you'd set a locale from req.cookies.\n\t\t// Don't forget to set the cookie either on the client or in your Express app.\n\t\tapp.use(function(req, res, next) {\n\t\t\treq.i18n.setLocaleFromCookie();\n\t\t\tnext();\n\t\t});\n\n\t\t// Set up the rest of the Express middleware\n\t\tapp.use(app.router);\n\t\tapp.use(express.static(__dirname + '/public'));\n\t});\n\n### Inside Your Express View\n\n\tmodule.exports = {\n\t\tindex: function(req, res) {\n\t\t\tres.render(\"index\", {\n\t\t\t\ttitle: req.i18n.__(\"My Site Title\"),\n\t\t\t\tdesc: req.i18n.__(\"My Site Description\")\n\t\t\t});\n\t\t}\n\t};\n\n### Inside Your Templates\n\n(This example uses the Swig templating system.)\n\n\t{% extends \"page.swig\" %}\n\n\t{% block content %}\n\t<h1>{{ __(\"Welcome to:\") }} {{ title }}</h1>\n\t<p>{{ desc }}</p>\n\t{% endblock %}\n\n## Changelog\n\n* 0.4.5: a number of bug fixes\n* 0.4.4: fix typo\n* 0.4.3: fix issue with preferredLocale failing on useragents with no accept lang header\n* 0.4.2: fix some issues with cache init\n* 0.4.1: rename locale query string param to lang\n* 0.4.0: made settings contained, and scoped, to a single object (complete re-write by jeresig)\n* 0.3.5: fixed some issues, prepared refactoring, prepared publishing to npm finally\n* 0.3.4: merged pull request #13 from Fuitad/master and updated README\n* 0.3.3: merged pull request from codders/master and modified for backward compatibility. Usage and tests pending\n* 0.3.2: merged pull request #7 from carlptr/master and added tests, modified fswrite to do sync writes\n* 0.3.0: added configure and init with express support (calling guessLanguage() via 'accept-language')\n* 0.2.0: added plurals\n* 0.1.0: added tests\n* 0.0.1: start \n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jeresig/i18n-node-2/issues"
  },
  "_id": "i18n-2@0.4.6",
  "_from": "i18n-2@~0.4.5"
}
