{
  "name": "rework-inherit",
  "description": "Inherit rules from other selectors",
  "version": "0.2.1",
  "dependencies": {
    "debug": "*"
  },
  "peerDependencies": {
    "rework": ">= 0.15.0"
  },
  "devDependencies": {
    "rework": ">= 0.15.0"
  },
  "scripts": {
    "test": "node test"
  },
  "author": {
    "name": "Jonathan Ong",
    "email": "me@jongleberry.com",
    "url": "http://jongleberry.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/reworkcss/rework-inherit.git"
  },
  "bugs": {
    "url": "https://github.com/reworkcss/rework-inherit/issues",
    "email": "me@jongleberry.com"
  },
  "license": "MIT",
  "readme": "## Inherit [![Build Status](https://travis-ci.org/reworkcss/rework-inherit.png)](https://travis-ci.org/reworkcss/rework-inherit)\n\nInherit mixin for [rework](https://github.com/visionmedia/rework).\nAllows you to inherit __all__ the rules associated with a given selector.\n\n### API\n\n```js\nvar inherit = require('rework-inherit')\n\nvar css = rework(inputCSS)\n  .use(inherit())\n  .toString()\n```\n\n#### Inherit(options{})\n\nOption parameters:\n\n* `propertyRegExp` - Regular expression to match the \"inherit\" property.\n  By default, it is `/^(inherit|extend)s?$/i`, so it matches \"inherit\", \"inherits\", \"extend\", and \"extends\".\n  For example, if you only want to allow the `extend` keyword,\n  set the regular expression to `/^extend$/`.\n\n### Examples\n\n#### Regular inherit\n\n```css\n.gray {\n  color: gray;\n}\n\n.text {\n  inherit: .gray;\n}\n```\n\nyields:\n\n```css\n.gray,\n.text {\n  color: gray;\n}\n```\n\n#### Multiple inherit\n\nInherit multiple selectors at the same time.\n\n```css\n.gray {\n  color: gray;\n}\n\n.black {\n  color: black;\n}\n\n.button {\n  inherit: .gray, .black;\n}\n```\n\nyields:\n\n```css\n.gray,\n.button {\n  color: gray;\n}\n\n.black,\n.button {\n  color: black;\n}\n```\n\n#### Placeholders\n\nAny selector that includes a `%` is considered a placeholder.\nPlaceholders will not be output in the final CSS.\n\n```css\n%gray {\n  color: gray;\n}\n\n.text {\n  inherit: %gray;\n}\n```\n\nyields:\n\n```css\n.text {\n  color: gray;\n}\n```\n\n#### Partial selectors\n\nIf you inherit a selector,\nall rules that include that selector will be included as well.\n\n```css\ndiv button span {\n  color: red;\n}\n\ndiv button {\n  color: green;\n}\n\nbutton span {\n  color: pink;\n}\n\n.button {\n  inherit: button;\n}\n\n.link {\n  inherit: div button;\n}\n```\n\nyields:\n\n```css\ndiv button span,\ndiv .button span,\n.link span {\n  color: red;\n}\n\ndiv button,\ndiv .button,\n.link {\n  color: green;\n}\n\nbutton span,\n.button span {\n  color: pink;\n}\n```\n\n#### Chained inheritance\n\n```css\n.button {\n  background-color: gray;\n}\n\n.button-large {\n  inherit: .button;\n  padding: 10px;\n}\n\n.button-large-red {\n  inherit: .button-large;\n  color: red;\n}\n```\n\nyields:\n\n```css\n.button,\n.button-large,\n.button-large-red {\n  background-color: gray;\n}\n\n.button-large,\n.button-large-red {\n  padding: 10px;\n}\n\n.button-large-red {\n  color: red;\n}\n```\n\n#### Media Queries\n\nInheriting from inside a media query will create a copy of the declarations.\nIt will act like a \"mixin\".\nThus, with `%`placeholders, you won't have to use mixins at all.\nEach type of media query will need its own declaration,\nso there will be some inevitable repetition.\n\n```css\n.gray {\n  color: gray\n}\n\n@media (min-width: 320px) {\n  .button {\n    inherit: .gray;\n  }\n}\n\n@media (min-width: 320px) {\n  .link {\n    inherit: .gray;\n  }\n}\n```\n\nyields:\n\n```css\n.gray {\n  color: gray;\n}\n\n@media (min-width: 320px) {\n  .button,\n  .link {\n    color: gray;\n  }\n}\n```\n\n### Limitations\n\n- You can not inherit a rule that is inside a media query;\n  you can only inherit rules outside a media query.\n  If you find yourself in this situation,\n  just use placeholders instead.\n\n### License\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 Jonathan Ong me@jongleberry.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/reworkcss/rework-inherit",
  "_id": "rework-inherit@0.2.1",
  "_from": "rework-inherit@0.2.1"
}
