// Implements console.log, console.error, console.time, et al and emits a
// console event for each output.

'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _core = require('babel-runtime/core-js')['default'];

var _require = require('util');

var format = _require.format;
var inspect = _require.inspect;

module.exports = (function () {
  function Console(browser) {
    _classCallCheck(this, Console);

    this.browser = browser;
  }

  _createClass(Console, [{
    key: 'assert',
    value: function assert(truth) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      if (truth) {
        return;
      }var formatted = format.apply(undefined, [''].concat(args));
      var message = 'Assertion failed: ' + (formatted || 'false');
      this.browser.emit('console', 'error', message);
      throw new Error(message);
    }
  }, {
    key: 'count',
    value: function count(name) {
      if (!this.counters) this.counters = {};
      if (!this.counters[name]) this.counters[name] = 0;
      this.counters[name]++;
      var message = '' + name + ': ' + this.counters[name];
      this.browser.emit('console', 'log', message);
    }
  }, {
    key: 'debug',
    value: function debug() {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      this.browser.emit('console', 'debug', format.apply(undefined, args));
    }
  }, {
    key: 'error',
    value: function error() {
      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      this.browser.emit('console', 'error', format.apply(undefined, args));
    }
  }, {
    key: 'group',
    value: function group() {}
  }, {
    key: 'groupCollapsed',
    value: function groupCollapsed() {}
  }, {
    key: 'groupEnd',
    value: function groupEnd() {}
  }, {
    key: 'dir',
    value: function dir(object) {
      this.browser.emit('console', 'log', inspect(object));
    }
  }, {
    key: 'info',
    value: function info() {
      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      this.browser.emit('console', 'log', format.apply(undefined, args));
    }
  }, {
    key: 'log',
    value: function log() {
      for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      this.browser.emit('console', 'log', format.apply(undefined, args));
    }
  }, {
    key: 'time',
    value: function time(name) {
      if (!this.timers) this.timers = {};
      this.timers[name] = _core.Date.now();
    }
  }, {
    key: 'timeEnd',
    value: function timeEnd(name) {
      if (this.timers) {
        var start = this.timers[name];
        delete this.timers[name];
        var message = '' + name + ': ' + (_core.Date.now() - start) + 'ms';
        this.browser.emit('console', 'log', message);
      }
    }
  }, {
    key: 'trace',
    value: function trace() {
      var error = new Error();
      var stack = error.stack.split('\n');
      stack[0] = 'console.trace()';
      var message = stack.join('\n');
      this.browser.emit('console', 'trace', message);
    }
  }, {
    key: 'warn',
    value: function warn() {
      for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }

      this.browser.emit('console', 'log', format.apply(undefined, args));
    }
  }]);

  return Console;
})();
//# sourceMappingURL=console.js.map