'use strict';

var clone = require('clone')
  , CSV = require('csv-string')
  ;

module.exports = function(options) {

  options = options || {};
  options.encoding = options.encoding ? options.encoding : 'utf8';
  options.separator = options.separator ? options.separator : undefined;

  return function (input, submit, conf) {


    var columns     = []
      , numb        = 0
      , concurrency = conf.concurrency || 1
      , delay       = conf.delay || 100
      , canRead     = true
      , saturated   = false;

    var readable = input.openStream({
      encoding: options.encoding
    });
    var parser = CSV.createStream({
      separator : options.separator
    });

    var read = function () {
      var chunk = null;
      while (canRead && !saturated && (null !== (chunk = readable.read()))) {
        saturated = !parser.write(chunk);
        if (saturated) {
          parser.once('drain', function () {
            saturated = false;
            read();
          });
        }
      }
    };

    var timeoutID;
    var qe;
    var pause = function () {
      canRead = false;
      clearTimeout(timeoutID);

      timeoutID = setTimeout(function() {
        if (qe.length() < concurrency) {
          canRead = true;
          read();
        } else {
          pause();
        }
      }, delay);
    };

    parser.on('data', function (row) {
      if (columns.length === 0) {
        columns = row;
      }
      else {
        var doc = clone(input, false);
        doc.content = {};
        doc.content.json = {};
        columns.forEach(function(x, i) {
          doc.content.json[x] = row[i];
        });
        ++numb;

        qe = submit(doc);

        if (qe.length() >= concurrency) { pause(); }
      }
    });
    parser.on('end', function() {
      if (numb > 0) {
        submit();
      } else {
        submit(new Error('No line detected !'));
      }
    });
    parser.on('error', function(e) {
      submit(e);
    });

    readable.on('readable', read);
    readable.on('end', function () {Â parser.end(); });
    readable.on('error', function (e) { submit(e); });
  }
}
